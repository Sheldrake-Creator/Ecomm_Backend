# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches-ignore:
      - "*"
  pull_request:
    types: [closed]
    branches: [ "main" ]

jobs:
  build:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: 30624003
          MYSQL_DATABASE: ecomm_store
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h 127.0.0.1 --silent; do
          echo "Waiting for MySQL to be ready..."
          sleep 5
        done

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Build Docker Image
      run: |
        docker build -t sheldrakecreator/ecommrepo:server .
      env:
        DOCKER_BUILDKIT: 1


    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker image

      run: docker push sheldrakecreator/ecommrepo:server

    # - name: Set up Docker Compose
    #   run: |
    #     echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    #     docker-compose up -d
